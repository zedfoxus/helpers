ng-app takes DOM ownership and acts only on that block. It auto-bootstraps application
It is possible to manually bootstrap like this: 
angular.bootstrap(document.getElementById('myApp'), ['myApp']);

angular.module(...) creates an application that ng-app relates to

ng-model binds the value of input field to variable name, can provide validation, app status (dirty, invalid, error, touched), 
build css classes and bind html elements to html forms

ng-bind is also a directive. It binds variable to view. Can use {{ <info here> }} instead of ng-bind

ng-init initializes variable with ng-app. There are better alternatives than this to load variables

ng-controller directive defines the controller; controls data

ng-repeat is like a for loop

ng-click binds clicking 
ng-dbl-click
ng-mousedown
ng-mouseenter
ng-mouseleave
ng-keydown
ng-keyup
ng-keypress
ng-change

ng-src source of img

ng-include acts like server side includes

ng-cloak hides {{ }} curly braces momentarily when page is loading up

$scope is application object that owns application variables and functions

$http is used when working with AJAX

myform.field.$dirty    - touched
myform.field.$invalid  - invalid data
myform.field.$valid    - valid data
myform.field.$pristine - untouched

myform.field.$error.email - validates email
myform.field.$error.required - requires data

angular.lowercase()
angular.uppercase()
angular.isString()
angular.isNumber()
angular.isArray()
angular.isDate()
angular.isDefined()
angular.isElement()
angular.isFunction()
angular.isObject()
angular.isUndefined()
angular.equals()
angular.fromJSON()
angular.toJSON()
angular.bootstrap()
angular.element()
angular.module()
angular.copy()
angular.forEach()
MODULES define Angular JS application
CONTROLLERS control the application



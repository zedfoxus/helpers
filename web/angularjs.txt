ng-app takes DOM ownership and acts only on that block. It auto-bootstraps application
It is possible to manually bootstrap like this: 
angular.bootstrap(document.getElementById('myApp'), ['myApp']);

angular.module(...) creates an application that ng-app relates to

ng-model binds the value of input field to variable name, can provide validation, app status (dirty, invalid, error, touched), 
build css classes and bind html elements to html forms

ng-bind is also a directive. It binds variable to view. Can use {{ <info here> }} instead of ng-bind

ng-init initializes variable with ng-app. There are better alternatives than this to load variables

ng-controller directive defines the controller; controls data

ng-repeat is like a for loop

ng-click binds clicking 
ng-dbl-click
ng-mousedown
ng-mouseenter
ng-mouseleave
ng-keydown
ng-keyup
ng-keypress
ng-change

ng-src source of img

ng-include acts like server side includes

ng-cloak hides {{ }} curly braces momentarily when page is loading up

$scope is application object that owns application variables and functions

$http is used when working with AJAX

myform.field.$dirty    - touched
myform.field.$invalid  - invalid data
myform.field.$valid    - valid data
myform.field.$pristine - untouched

myform.field.$error.email - validates email
myform.field.$error.required - requires data

angular.lowercase()
angular.uppercase()
angular.isString()
angular.isNumber()
angular.isArray()
angular.isDate()
angular.isDefined()
angular.isElement()
angular.isFunction()
angular.isObject()
angular.isUndefined()
angular.equals()
angular.fromJSON()
angular.toJSON()
angular.bootstrap()
angular.element()
angular.module()
angular.copy()
angular.forEach()

MODULES define Angular JS application
CONTROLLERS control the application

$watchCollection watches a scope field for changes and acts up on it with an anonymous function
$formatters convert model data to something suitable for the view
$parsers convert view data to something suitable for model

get injector in browser: http://stackoverflow.com/questions/15527832/how-can-i-test-an-an-angularjs-service-from-the-console
injector = angular.element(document.body).injector()
injector.get('ServiceName')

Angular comes with jQuery Lite jQLite. One can add their own jQuery library and have Angular use that.

Dependency injection can be done in AngularJS with value, factory, service, provider and constant

_ is called lodash
Underscore.js has many utilities like _.any, _.find that help in traversing through objects

Scope life cycle
Browser -> receives event -> js callback -> complete -> re-render DOM and wait for more events
When JS is called, angular does this:
Enters execution context using $apply to account for modifications and evaluating expressions
Then $digest is done that examines all $watch expressions and compares with previous value to determine dirty-ness
Setting of variables like $scope.name='test' doesn't happen immediately. Changes are combined and then $watch is done.
Changes from $watch go through $digest again

